generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  username       String
  nickname       String?
  password_hash  String
  role           UserRole @default(USER)
  is_verified    Boolean  @default(false)
  avatar_id      String?
  avatar_url     String?
  views_count    Int      @default(0)
  favorites_count Int     @default(0)
  watchlist_count Int     @default(0)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  verification_codes VerificationCode[]
  settings       UserSettings?
  profile        UserProfile?
  viewing_history ViewingHistory[]
  favorites      Favorites[]
  watchlist      Watchlist[]
}

model VerificationCode {
  id         Int      @id @default(autoincrement())
  code       String
  email      String
  expires_at DateTime
  created_at DateTime @default(now())
  user       User     @relation(fields: [email], references: [email])
}

model Media {
  id              Int             @id @default(autoincrement())
  title           String
  original_title  String?
  type            MediaType
  description     String?
  poster_url      String?
  backdrop_url    String?
  release_date    DateTime?
  rating          Float           @default(0)
  duration        Int?
  views           Int             @default(0)
  status          MediaStatus     @default(ACTIVE)
  source_id       String?
  source_type     String?
  actors          String[]        @default([])
  director        String?
  writers         String[]        @default([])
  crew            Json?
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  genres          Genre[]
  episodes        Episode[]
  viewing_history ViewingHistory[]
  favorites       Favorites[]
  watchlist       Watchlist[]
  video_sources   VideoSource[]
}

model UserProfile {
  id           Int      @id @default(autoincrement())
  user_id      Int      @unique
  bio          String?
  location     String?
  website      String?
  social_links Json?
  user         User     @relation(fields: [user_id], references: [id])
}

model UserSettings {
  id                Int     @id @default(autoincrement())
  user_id           Int     @unique
  notification_email Boolean @default(true)
  notification_web  Boolean @default(true)
  privacy_profile   Boolean @default(false)
  theme             String  @default("light")
  language          String  @default("ru")
  user              User    @relation(fields: [user_id], references: [id])
}

model ViewingHistory {
  id             Int      @id @default(autoincrement())
  user_id        Int
  media_id       Int
  watch_duration Int      @default(0)
  created_at     DateTime @default(now())
  user           User     @relation(fields: [user_id], references: [id])
  media          Media    @relation(fields: [media_id], references: [id])

  @@unique([user_id, media_id], name: "user_id_media_id")
}

model Favorites {
  id         Int      @id @default(autoincrement())
  user_id    Int
  media_id   Int
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
  media      Media    @relation(fields: [media_id], references: [id])

  @@unique([user_id, media_id])
}

enum MediaType {
  MOVIE
  SERIES
}

enum MediaStatus {
  ACTIVE
  INACTIVE
  ERROR
}

enum ParserStatusType {
  active
  inactive
  error
}

model Genre {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  media  Media[]
}

model Episode {
  id             Int       @id @default(autoincrement())
  title          String
  episode_number Int
  season_number  Int
  air_date       DateTime?
  description    String?
  media_id       Int
  media          Media     @relation(fields: [media_id], references: [id])

  @@unique([media_id, season_number, episode_number])
}

model ParserStatus {
  id             Int      @id @default(autoincrement())
  status         ParserStatusType
  lastRun        DateTime @default(now())
  processedItems Int      @default(0)
  errors         String[]
}

model ParserLog {
  id        Int      @id @default(autoincrement())
  message   String
  error     String
  timestamp DateTime @default(now())
}

model ParserSettings {
  id             Int      @id @default(autoincrement())
  kinopoiskApiKey String
  omdbApiKey     String
  updateInterval Int      @default(24)
  autoUpdate     Boolean  @default(false)
  contentTypes   String[] @default(["MOVIE", "SERIES"])
}

model ParserHistory {
  id        Int      @id @default(autoincrement())
  source    String
  status    String
  details   String?
  startTime DateTime @default(now())
  endTime   DateTime?
  itemsProcessed Int @default(0)
  errors    String[]
}

model Watchlist {
  id         Int      @id @default(autoincrement())
  user_id    Int
  media_id   Int
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
  media      Media    @relation(fields: [media_id], references: [id])

  @@unique([user_id, media_id])
}

model VideoSource {
  id         Int      @id @default(autoincrement())
  media_id   Int
  url        String
  quality    String
  type       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  media      Media    @relation(fields: [media_id], references: [id], onDelete: Cascade)
}

model VideoSource {
  id         Int      @id @default(autoincrement())
  media_id   Int
  url        String
  quality    String
  type       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  media      Media    @relation(fields: [media_id], references: [id], onDelete: Cascade)
}